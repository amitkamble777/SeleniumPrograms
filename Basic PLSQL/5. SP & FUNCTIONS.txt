====================================
Procedures / Stored Procedures / SP
====================================
- A procedure/SP (Stored Procedure) is a reusable PL/SQL program which may or maynot return a value.
- A procedure is stored in the Database.
- A procedure has a name
- A procedure can be called more than once.
- A procedure will be compiled first, and it will be executed only without re-compilation later.
- The compiled code stored in Database is called as p-code/m-code [pesudo-code or machine code].

Advantages
==========
- Resuable
- Better Security
- Better performance (avoids re-compilations)
- Can return values and accept parameters


Difference between SP & Anonymous blocks
========================================

	PROCEDURE				Anonymous PLSQL Program / Block
=================================================================================

They will have a name			No Name


SP may or maynot return a value		Cannot return a value


Stored in the Database			Not stored in the Database


Better peformance(once compilation)	Lesser Performance(repeated compilation)


Reusable				Not Reusable

=================================================================================

Parameter Types
================
a) Formal parameters : used during creation of SP
b) Actual parameters : used during calling of a SP


Syntax
======

create or replace procedure sp_name
(
  param_name1	Param_mode	Datatype,  -- } formal parameters
  param_name2	Param_mode	Datatype,  -- }
  ..
  ..
)
IS
  ..
  ..  } Declarative section 
BEGIN
   .. } Executable section
   .. 
EXCEPTION
   .. } error handling section
   .. 
END;
/

===============================================================
SQL> exec sp_name(val1, val2, ....); --> actual paramaters
===============================================================

SQL> begin
	  sp_name(val1, val2, ....);  --> actual paramaters
     end;
/
===============================================================

Parameter modes:-
=================
IN	: by default a parameter is IN
	: it carries a value into a SP
	: this parameter cannot be modified within SP
	: it acts like a constant (initialized constant)

OUT	: it returns a value from SP
	: only one value can be returned a single parameter
	: we can have more than one OUT parameter
	: it acts like un-initialized variable
	
IN OUT	: combination of IN & OUT
	: it can carry value into a SP and same return a value
	: the data type of both IN & OUT should be same
	: it acts like initialized-variable
===============================================================================

Eg:- Write a SP to add any 2 nums and return the sum of them.

create or replace procedure add_nums
(
   p1 in 	number,
   p2 		number,
   p3 out	number
)
is
   vtest varchar(10);
begin

   p3 := p1 + p2;
  
end;
/
-------------testing the stored procedure-------------------
sql> variable vt number;
sql> exec add_nums(40,50, :vt);
sql> print vt
sql> show err;
============================================================

Eg:- Write a SP to return ENAME, for a given empno.

create or replace procedure GET_DETAILS
(
  p_empno  IN      NUMBER,
  p_ename  OUT     VARCHAR
)
is
begin
   select  ename
   into    p_ename,
   from    emp
   where   empno = p_empno;
end;
/

--unit testing
sql> variable xname varchar2(20);

sql> exec get_name(7788, :xname);


sql> print :xname;


SQL> SHOW ERR;

=============================================================


Eg:- Write a SP to return ENAME, SAL, DEPTNO, JOB a given empno.

create or replace procedure GET_NAME
(
  p_empno  IN      NUMBER,
  p_ename  OUT     VARCHAR,
  p_sal	   out	number,
  p_dno	   out  number,
  ..
)
is
begin
   select  ename, ,sal,deptno,job
   into    p_ename,,,,
   from    emp
   where   empno = p_empno;
end;
/

--unit testing
sql> variable xname varchar2(20);

sql> exec get_name(7788, :xname, :xsal, :dno, :xjob);

sql> print :xname;





============================================================

Assignment:- Write a SP to return ALL COLUMNS for a given empno USING %rowtype.

create or replace procedure get_name
(
  p_empno   IN      NUMBER,
  p_DATA    OUT     EMP%ROWTYPE
)
is

begin
....
....

end;
/

--unit testing
....
<< WE NEED TO CALL FROM A ANONYMOUS PLSQL PROGRAM >>
....
=========================

Eg:- SP To insert a record to dept table by accepting deptno, dname & location

create or replace procedure save_dept
(
  pdno in number,
  pdnm in varchar,
  ploc in varchar
)
is
	
begin
	if length(pdnm) > 10 then
	   raise_application_error(-20009, 'length high!!');
	end if; 
	insert into dept values (pdno, pdnm, ploc);
	commit;
end;
/

--unit testing

sql> exec save_dept(45, 'x' , 'ba');

sql> select * from dept;


========================= 
Assignments
=========================
Consider a table called "PROD"
=============================
Prod_ID  (pk)
PNAME
PROD_DESC
=============================

Write a SP to save a Product details

a) PROD_SAVE(PID IN NUMBER, PNM IN VARCHAR, PROD_DESC IN VARCHAR);

VALIDATIONS
===========
A) PNAME SHOULD NOT BE NULL.
B) PID SHOULD NOT BE MORE THAN 5 DIGITS

create or replace procedure prod_save
(pid 	in number,
 pnm 	in varchar,
 pdesc	in varchar
)
is
begin
  if pname is null then
	raise_application_error(-20009, 'Prod Name is mandatory');
  end if;

  if length(pid) > 5 then  
	raise_application_error(-20009, 'Invalid prod id..');
  end if;
 
  insert into prod values(pid, pnm, pdesc);

  commit;
end;
/
====================================================================================

TASK: Perform unit testing for all the scenarios.

sql> exec prod_save(1001, 'mouse', 'test');
sql> exec prod_save(1001, '', 'test');
sql> exec prod_save(100111, 'mouse', 'test');

====================================================================================


Assignment:-
============ 

ORDERS table (5 columns)
========================
ORD_ID (PK) -->> auto-genrated from a sequence
PID
ORD_DT
QTY
PRICE

- Write a SP to create a new order   (ORD_SAVE) (4 IN parameters)

create or replace procedure ord__save
(pid 		in number,
 p_ord_dt 	in date,
 p_price	in number,
 p_qty		in number
)
is
..
begin
..
..
..
..

insert into orders values(tseq.nextval,.........);
commit;

end;
/


VALIDATIONS
============
A) ORD_DT SHOULD BE CURRENT DATE (consider only the date part not the time)
	IF TRUNC(p_ord_dt) != trunc(sysdate)
B) PRICE & QTY SHOULD NOT BE -VE VALUE
C) ORD_ID SHOULD BE GENEREATED FROM A SEQUENCE
D) QTY SHOULDN'T BE MORE THAN 50 IN A SINGLE ORDER  
E) ORDERS ARE NOT ALLOWED DURING THE WEEK-ENDS -->> if to_char(p_ord_dt,'DY') IN ('SAT','SUN') THEN



** Write a SP To drop a table? Table name Should be IN Parameter.
** Write a SP that uses CURSOR.

===========================================================

Use OUT parameters for the following:-
======================================
- Write a SP to return the highest sal for the given DEPTNO.
- Write a SP to return the second employee name joined in a given DEPTNO.
- Write a SP to update the salary for a given EMPNO by 20% then return new sal.


===============================================================================

Methods of Calling the Procedure/Function
=========================================

a) Positional Notation 		- based on the position, here we cannot change
				  the order of the parameter,	

b) Named Notation (FP => AP) 	- based on the name, here we can change order of
			  	  the parameter. But it would be too lengthy
				  to mention all the parameters if we have more 
  				   number of parameters.

c) Mixed Notation(a+b) 		- mixture of positional & named notation.
				  First we need to mention positional & then named.	
Eg:-
===
procedure save_emp
(
 peno   number,
 pname  varchar,
 psal   number
)
==============================

a) Positional Notation
======================

sql> exec save_emp(7788,'scott',2000);

================

b) Named Notation
=================

sql> exec save_emp(peno=>7788, psal=>2000, pname=>'scott' );

============

c) Mixed Notation
=================
sql> exec save_emp(7788,  psal=>2000, pnm=>'scott');

** first we should use positional and the next should be named..

 
NOTE:- 
[If there is any Datatype mismatch or no. of parameters mismatch]

PLS-00306: wrong number or types of arguments in call to 'SAVE_DEPT'



========================================
Passing Default Values to the Parameters
========================================
- Only IN Parameters are given with DEFAULT values.
- If we don't pass values during the execution they will be read from Default values.

- When we use position notation then we can pass default values only from the end.
- But by using named notation we can pass default values to any parameter.


procedure save_dept
(
  pdno 	in 	number,

  pdnm 	in 	varchar := 'RES' ,

  ploc 	in 	varchar default 'BAN'

)
..
..
end;
-------------

exec save_dept(20,'accts','mys'); -- no defaults would be used ..

exec save_dept(20,'SALES');  --> LOC will use the default value.

exec save_dept(20);  --> DNAME & LOC will use the default value.

exec save_dept(20,,'mys'); --> error.


exec save_dept(pdno=>20, ploc=>'mys'); --> default is taken as RES for pdnm, 
						(named notation)

exec save_dept(pdno=>20, pdnm=>'RES', ploc=>'mys'); -- no defaults would be used..
=========================================================


NOTE:
=====
** Any compilation errors are stored in USER_ERRORS or ALL_ERRORS view.


--Listing All the SPs from User
SELECT OBJECT_NAME,STATUS FROM USER_OBJECTS WHERE OBJECT_TYPE='PROCEDURE';

--source code
SELECT TEXT FROM USER_SOURCE WHERE NAME='SAVE_DEPT'; -- CONTAINS THE SOURCE CODE

--to know the parameters without seeing source code.
desc save_dept;


====================================================================

unit testing:-
 - Done by Developers.
 - also called as white box testing.
 - All the scenarios in the program should be tested.
 - The scenarios are tested by seeing the source code.

==========================================================================
EXAMPLE FOR "IN OUT" PARAMETER
==========================================================================
--write a SP to return salary for a given EMPNO

CREATE OR REPLACE PROCEDURE GET_SAL
(
  PVAL  IN OUT NUMBER  -- Formal Parameter
)
IS
  VSAL NUMBER;
BEGIN
  SELECT SAL
  INTO   VSAL
  FROM   EMP
  WHERE  EMPNO = PVAL;

  PVAL := VSAL;

END;
/

===================
DECLARE
  VTEMP NUMBER := 7788;
BEGIN
  GET_SAL(VTEMP); -- AP
  DBMS_OUTPUT.PUT_LINE(VTEMP);
END;
/
=================================================================================
NOTE: For IN OUT Parameter, the dataype should be same.
=================================================================================


*****************************************************************************************
*****************************************************************************************
*****************************************************************************************
*****************************************************************************************
*****************************************************************************************




=================================================================================
=================================================================================
==============================================================================================
=======  Functions (user-defined functions) ===========

- Function is a reusable program that should return a value.
- Function should return a value always.
- Function can be called from a SQL statement.
- Function can have DML,DDL,DCL,TCL statements.
- Function can return more than 1 values
- Function can have OUT parameters, IN OUT parameters as well.


Differences
===========

	PROCEDURE				FUNCTION
========================================================================

SP may or maynot return a value		Should return a value


SP can't be called from SQL 		Can be called from a SQL statement.
statements			
					Eg:-
					a) select get_dname(20) from dual;
					b) insert into temp
						values(20, get_dname(20));	


SP can't used in expression		Can be used in an expression directly.
directly.				

declare
  vsal number;
  vt   number;				declare
						vt number;
begin					begin
  get_sal(7788, vsal);				vt := get_sal(7788) + 9000;
  vt := vsal + 9000;				dbms_output.put_line(get_sal(7566));
  get_sal(7566, vsal);			end;
  dbms_output.put_line(vsal);
end;


Procedure may or may not have		Should have RETURN keyword.
RETURN keyword				Otherwise we will get a run-time error.
					

==============================================================================================

NOTE : Functions will have more flexibility than procedures



Examples
========

int add(int a, int b)
{
  int c;
  c = a+b;
  return c;
}

main()
{
  int x;
  x=add(5,6);
  printf(&x,%d);
}


===================================================================


-- Adding 2 numbers and return the sum of them

create or replace function add_nums
(
  p1 in number,
  p2 in number
)
return number
is
	vsum number;
begin
	vsum := p1+p2;
	return vsum;
end;
/


-- unit testing

select add_nums(10,50) from dual;

select add_nums(sal,comm) from emp;

===================================================================
-- WRITE A FUNCTION TO RETURN ENAME FOR A GIVEN EMPNO

CREATE OR REPLACE FUNCTION GET_NAME
(
  peno in number
)
return varchar -- it is a must , it is return data type [compilation error]
is
  vname varchar(20);
begin
  select 	ename
  into		vname
  from		emp
  where		empno = peno;

  return vname;  -- it is a must, otherwise it throws run-time error.

end;
/


--executing/calling a function (unit testing)

select get_name(7788) from dual ;

select get_name(7788), get_name(7839) from dual ;

select empno, get_name(empno) from emp ;


===================================================================

--Function to return the status for a given empno
-- status = 'low' if sal <= 2000, else status = 'high' 

CREATE OR REPLACE FUNCTION get_status
(
  peno in number
)
return varchar 
is
  vsal number;
  vst  varchar(10);
begin
  select 	sal
  into		vsal
  from		emp
  where		empno = peno;
 
  if vsal <= 2000 then
	vst := 'LOW';
  else
	vst := 'HIGH';
  end if;

  return vst;  

end;
/

-- unit testing

select get_status(7788) from dual;

select ename, sal, get_status(empno) from emp;


==========================================================================================

Imp. Notes:
===========

a) we can call a SP from a function & vice-versa.

b) If we don't return any value from a function, then we get run-time error
   "ORA-06503: PL/SQL: Function returned without value" error  
   If we don't want to return any value, then we should use RETURN NULL.

d) SP & User-defined Function can't have a same name

e) Function should be used, only if we want to return exactly 1 value, else
   go for SP always(no value or >1 values).

f) A sub-program means a SP or Function.


Restrictions for functions to be called from SQL Statements
-----------------------------------------------------------
[Scenarios where Functions cannot be called from a SQL statement directly]

a) Function shouldn't have any OUT Parameters.
    [Function shouldn't return more than 1 value]

b) Function shouldn't return any datatype which is not compatible with SQL.
   (BOOLEAN, BINARY_INTEGER etc).

c) Function shouldn't have DML statements. But if we use PRAGMA AUTONOMOUS_TRANSACTION, then we can call from a SQL Statements even though it has a DML statements.
=================================================================================

-- Write a function to return ename,sal & job for a given empno.
-- example for function returning more than 1 values.


create or replace function get_sal_f
(
  peno  IN 	number,
  pnm   OUT	varchar,
  pjob  OUT	varchar
)
return number  -- returning sal
is
	vt number;
begin
	select	sal,ename,job
	into	vt,pnm,pjob
	from	emp
	where	empno = peno;
	return vt; -- returning sal.
end;
/


sql> select get_sal_f(7788) from dual ;  -- error, returning multiple values.



So, we need to use Anonymous block to test the above function, so flexibility is lost.
--------------------------------------------------------------------------------------
sql> declare
	v1 number;
	v2 varchar(10);
	v3 varchar(10);
     begin
	v1 := get_sal_f(7788,v2,v3);
        dbms_output.put_line(v2||v3||v1);
     end;
/




Alternatively, we can write procedure itself easily..
-----------------------------------------------------

sql> 
create or replace procedure get_sal_p
(
  peno  IN 	number,
  pnm   OUT	varchar,
  pjob  OUT	varchar,
  psal  OUT	NUMBER
)
is
begin
	select	sal,ename,job
	into	psal,pnm,pjob
	from	emp
	where	empno = peno;
end;
/


=================================================================================

-- example for function having pragma autonomous_transaction
-- updates the salary by 20% and returns the same

create or replace function upd_sal
(peno in number)
return number
is
	vsal number;
	pragma autonomous_transaction;
begin

   update emp
	set sal = sal + (sal*0.2)
	where empno = peno
	returning sal into vsal;

   commit;

/* select sal
   into   vsal
   from   emp
   where  empno = peno;
*/

   return vsal;

end;
/


select upd_sal(7788) from dual;  -- it works because of "autonomous_transaction"


====================================================================================

Assignments
===========
a) function to get factorial of a number.
b) function to check prime or not.
c) function to count the number of vowles in a given string
d) function to return all the enames for a given deptno (CURSOR)
     (if i/p is 20. return value is : scott,blake,jones,miller).
       NOTE: Don't use WM_CONCAT
Eg:- 
====
sql> select wm_concat(ename) from emp;


e) Write a function to return status of an employee for his empno.
   If the salary of the emp is < 2000 then status = 'LOW'
   If the salary of the emp is < 4000 then status = 'MED'
   If the salary of the emp is > 6000 then status = 'high'
   If the empno is not present then status = 'NF'

f)  function to check whether a number is odd or even?

g) Write a function to drop a table? [ input = Tablename, output => nothing ]
   clue => RETURN NULL.
   This function should be called from SQL Statement.

h) Write a function to delete an emp for a given empno and return his name.
   Also this function should be able from call from SQL Statement.
 
=================================================================================

Interview Assignments
=====================

-- Function to return a boolean value based on a input.

create or replace function checkodd
(pno in number)
return boolean
is
begin
     if peno != 0 then
	return true;
     else
	return false;
     end if;
end;
/
==================================================

-- Function to return capital letter of every word

create or replace function start_capital
(pname in varchar)
return varchar
begin
    return initcap(pname);
end;
/
==================================================


-- Procedure to print the position and the letter of a string.

create or replace procedure disp_pos
(
  pstr in varchar
)
is
begin
	for i in 1..length(pstr)
	loop
		dbms_output.put_line(i || ' - ' || substr(pstr,i,1));
	end loop;
end;
/

=============================================================



- write a function to return "character" if "alphabet" is entered else return as number.

create or replace function get_details
(
	p_char in varchar
)
return varchar
is

begin
	if REGEXP_INSTR(p_char ,'[[:digit:]]') > 0 then
		return 'number';
	elsif REGEXP_INSTR(p_char ,'[[:alpha:]]') > 0 then
		return 'character';
	end if;
end;
/


select get_details('101') from dual;

select get_details('sarlakg') from dual;

=============================================================

